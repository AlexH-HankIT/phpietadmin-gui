<?php namespace phpietadmin\app\models;
class Std {
    /**
     * array_search for multidimensional arrays
     *
     * @param string $needle
     * @param array $haystack
     * @return int|bool
     *
     */
    public function recursive_array_search($needle, array $haystack) {
        foreach ($haystack as $key => $value) {
            $current_key = $key;
            if ($needle === $value OR (is_array($value) && $this->recursive_array_search($needle, $value) !== false)) {
                return $current_key;
            }
        }
        return false;
    }

    /**
     *  array_search function with partial match
     *
     * @param string $needle
     * @param array $haystack
     * @link https://gist.github.com/branneman/951847
     * @return bool
     *
     */
    public function array_find($needle, array $haystack) {
        foreach ($haystack as $key => $value) {
            if (false !== stripos($value, $needle)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Collects data for the phpietadmin dashboard
     *
     * @return array
     */
    public function get_dashboard_data() {
        $data['hostname'] = file_get_contents('/etc/hostname');
        $data['phpietadminversion'] = file_get_contents('/usr/share/phpietadmin/version');
        $data['distribution'] = shell_exec('lsb_release -sd');

        $hwdata = file('/proc/cpuinfo');
        $hwdata[4] = str_replace("model", '', $hwdata[4]);
        $hwdata[4] = str_replace("name", '', $hwdata[4]);
        $data['cpu'] = str_replace(":", '', $hwdata[4]);

        $data['uptime'] = shell_exec('uptime -p');
        $data['systemstart'] = shell_exec('uptime -s');

        preg_match('/load average: (.*)/', shell_exec('uptime'), $matches);
        $data['currentload'] = $matches[1];

        $mem = file('/proc/meminfo');
        preg_match('/[0-9]+/', $mem[0], $matches);
        $data['memtotal'] = intval($matches[0] / 1024);

        preg_match('/[0-9]+/', $mem[1], $matches);
        $data['memused'] = intval($matches[0] / 1024);

        $data['systemtime'] = shell_exec('date');
        $data['kernel'] = shell_exec('uname -r');

        return $data;
    }

    /**
     * Checks if an incoming request is an ajax
     *
     * @return bool
     */
    public function IsXHttpRequest() {
        if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && !empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
            return true;
        } else {
            return false;
        }
    }

    /**
     *
     * Escape and execute a command
     * $return['status'] = string, contains a error message from the program executed
     * $return['result'] = int contains a error code from the program executed
     * $return['code_type'] = error code generated by third party tool or phpietadmin?
     *
     * @param    string $command command to be executed
     * @return   array
     *
     */
    protected function exec_and_return($command) {
        $return = [];
        exec(escapeshellcmd($command) . ' 2>&1', $return['status'], $return['result']);
        $return['code_type'] = 'extern';
        return $return;
    }

    /**
     *
     * empty() function for multiple values
     *
     * @link    http://stackoverflow.com/questions/4993104/using-ifempty-with-multiple-variables-not-in-an-array
     * @return      boolean
     *
     */
    public function mempty() {
        foreach (func_get_args() as $arg)
            if (empty($arg))
                continue;
            else
                return false;
        return true;
    }

    /**
     * Create a "normal" array from a multidimensional one
     *
     * @param array $array multidimensional array to convert
     * @return array
     * @link http://stackoverflow.com/questions/6785355/convert-multidimensional-array-into-single-array/6785366#6785366
     *
     */
    public function array_flatten(array $array) {
        if (!is_array($array)) {
            return FALSE;
        }
        $result = array();
        foreach ($array as $key => $value) {
            if (is_array($value)) {
                $result = array_merge($result, $this->array_flatten($value));
            } else {
                $result[$key] = $value;
            }
        }
        return $result;
    }
}