<?php
    class Exec extends Logging {
        private $lvcreate;
        private $lvremove;
        private $lvrename;
        private $lvextend;
        private $lvreduce;
        private $lvconvert;
        private $sudo;
        private $vgs;
        private $pvs;
        private $lvs;
        protected $database;
        protected $vg_name;
        protected $pv_name;
        protected $lv_name;
        protected $vg;

        public function __construct() {
            $this->lvcreate = $this->database->get_config('lvcreate');
            $this->lvremove = $this->database->get_config('lvremove');
            $this->sudo = $this->database->get_config('sudo');
            $this->vgs = $this->database->get_config('vgs');
            $this->pvs = $this->database->get_config('pvs');
            $this->lvs = $this->database->get_config('lvs');
            $this->lvrename = $this->database->get_config('lvrename');
            $this->lvextend = $this->database->get_config('lvextend');
            $this->lvreduce = $this->database->get_config('lvreduce');
            $this->lvconvert = $this->database->get_config('lvconvert');

            // check only sudo and lvs
            // if lvs exists, the other lvm binaries should be there as well
            if (!file_exists($this->sudo)) {
                echo 'Please install sudo!' . "\n";
                die();
            } else if (!file_exists($this->lvs)) {
                echo 'Please install lvm!' . "\n";
            }
        }

        protected function set_database($database) {
            $this->database = $database;
        }

        protected function set_vg_name($vg_name) {
            $this->vg_name = $vg_name;
        }

        protected function set_pv_name($pv_name) {
            $this->pv_name = $pv_name;
        }

        protected function set_lv_name($lv_name) {
            $this->lv_name = $lv_name;
        }

        /**
         *
         * Escape and execute a command
         * $return['status'] = string, contains a error message from the program executed
         * $return['result'] = int contains a error code from the program executed
         * $return['code_type'] = error code generated by third party tool or phpietadmin?
         *
         * @param    string  $command  command to be executed
         * @return   array
         *
         */
        private function exec_and_return($command) {
            $return = [];
            exec(escapeshellcmd($command) . ' 2>&1', $return['status'], $return['result']);
            $return['code_type'] = 'extern';
            return $return;
        }

        /**
         *
         * Add a logical volume
         *
         * @param    string  $size  size of the volume in gb
         * @return   array
         *
         */
        protected function add_logical_volume($size) {
            return $this->exec_and_return($this->sudo . ' ' . $this->lvcreate . ' -L ' . $size . 'g -n' . $this->lv_name . ' ' . $this->vg_name);
        }

        /**
         *
         * Delete a logical volume
         *
         * @return   array
         *
         */
        protected function delete_logical_volume() {
            return $this->exec_and_return($this->sudo . ' ' . $this->lvremove . ' --force /' . '/dev/' . $this->vg_name . '/' . $this->lv_name);
        }

        protected function create_lv_snapshot($size) {
            return $this->exec_and_return($this->sudo . ' ' . $this->lvcreate . ' --snapshot --size ' . $size . 'g --name ' . '/dev/' . $this->vg_name . '/' . $this->lv_name . '_snapshot_' . time() . ' /dev/' .$this->vg_name . '/' . $this->lv_name);
        }

        protected function change_lv_name($new_name) {
            return $this->exec_and_return($this->sudo . ' ' . $this->lvrename . ' /dev/' . $this->vg_name . '/' . $this->lv_name . ' /dev/' . $this->vg_name . '/' . $new_name);
        }

        protected function extend_lv_size($size) {
            return $this->exec_and_return($this->sudo . ' ' . $this->lvextend . ' --force -L' . $size . 'G' . ' /dev/' . $this->vg_name . '/' . $this->lv_name);
        }

        protected function reduce_lv_size($size) {
            return $this->exec_and_return($this->sudo . ' ' . $this->lvreduce . ' --force -L' . $size . 'G' . ' /dev/' . $this->vg_name . '/' . $this->lv_name);
        }

        protected function merge_lv_snapshot() {
            return $this->exec_and_return($this->sudo . ' ' . $this->lvconvert . ' --merge /dev/' . $this->vg_name . '/' . $this->lv_name);
        }

        /**
         *
         * Executes pvs/vgs/lvs and return the output as string
         *
         * @param    boolean, string  $vg_name  name of a volume group, if false, all volume groups will be returned
         * @return   boolean, array
         *
         */
        protected function get_lvm_output($type) {
            if ($type == 'vg') {
                if ($this->vg_name !== false) {
                    exec($this->sudo . ' ' .$this->vgs . ' --units g --separator "." ' . escapeshellarg($this->vg_name) . ' 2>&1', $data, $result);
                } else {
                    exec($this->sudo . ' ' .$this->vgs . ' --units g --separator "." ' . ' 2>&1', $data, $result);
                }
            } else if ($type == 'pv') {
                if ($this->pv_name !== false) {
                    exec($this->sudo . ' ' .$this->pvs . ' --units g --separator "." ' . escapeshellarg($this->pv_name) . ' 2>&1', $data, $result);
                } else {
                    exec($this->sudo . ' ' .$this->pvs . ' --units g --separator "."' . ' 2>&1', $data, $result);
                }
            } else {
                if (!empty($this->lv_name) && $this->lv_name !== false) {
                    exec($this->sudo . ' ' .$this->lvs . ' --units g --separator "." /dev/' . escapeshellarg($this->vg_name) . '/' . escapeshellarg($this->lv_name) . ' 2>&1', $data, $result);
                } else if ($this->vg_name !== false) {

                    exec($this->sudo . ' ' . $this->lvs . ' --units g --separator "." /dev/' . escapeshellarg($this->vg_name) . ' 2>&1', $data, $result);
                } else {
                    exec($this->sudo . ' ' .$this->lvs . ' --units g --separator "."' . ' 2>&1', $data, $result);
                }
            }

            if (empty($data)) {
                return false;
            } else {
                if ($result != 0) {
                    return false;
                } else {
                    return $data;
                }
            }
        }
    }